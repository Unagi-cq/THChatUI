"use strict";(self["webpackChunkTHChatUI"]=self["webpackChunkTHChatUI"]||[]).push([[366],{73366:function(n,e,t){t.r(e),t.d(e,{default:function(){return f}});var a=t(56768),o=t(24232);const s={class:"docs-container standard-page-container"},i={class:"docs-header standard-page-header"},c={class:"docs-stats standard-page-stats"},l={key:0,class:"active-doc"},d={class:"doc-content-wrapper",ref:"introContent"},r={class:"doc-content-wrapper",ref:"tutorialContent"},h={class:"doc-content-wrapper",ref:"quickDevContent"},p={class:"doc-content-wrapper",ref:"i18nContent"},u={class:"doc-content-wrapper",ref:"seniorContent"};function m(n,e,t,m,_,g){const I=(0,a.g2)("v-md-preview"),b=(0,a.g2)("el-tab-pane"),y=(0,a.g2)("el-col"),C=(0,a.g2)("el-tabs"),v=(0,a.g2)("el-row");return(0,a.uX)(),(0,a.CE)("div",s,[(0,a.bF)(v,{gutter:24,justify:"center",style:{"margin-left":"0","margin-right":"0"}},{default:(0,a.k6)((()=>[(0,a.bF)(y,null,{default:(0,a.k6)((()=>[(0,a.Lk)("div",i,[e[1]||(e[1]=(0,a.Lk)("h4",null,"文档中心",-1)),(0,a.Lk)("div",c,[g.activeTab?((0,a.uX)(),(0,a.CE)("span",l,"当前："+(0,o.v_)(g.activeTab),1)):(0,a.Q3)("",!0)])]),(0,a.bF)(C,{modelValue:_.activeTabName,"onUpdate:modelValue":e[0]||(e[0]=n=>_.activeTabName=n),"tab-position":"top",class:"docs-tabs",onTabClick:g.handleTabClick},{default:(0,a.k6)((()=>[(0,a.bF)(y,{style:{padding:"0"}},{default:(0,a.k6)((()=>[(0,a.bF)(b,{label:"介绍",name:"intro"},{default:(0,a.k6)((()=>[(0,a.Lk)("div",d,[(0,a.bF)(I,{text:_.intro_md,onCopyCodeSuccess:g.handleCopyCodeSuccess},null,8,["text","onCopyCodeSuccess"])],512)])),_:1}),(0,a.bF)(b,{label:"使用教程",name:"tutorial"},{default:(0,a.k6)((()=>[(0,a.Lk)("div",r,[(0,a.bF)(I,{text:_.tutorial_md,onCopyCodeSuccess:g.handleCopyCodeSuccess},null,8,["text","onCopyCodeSuccess"])],512)])),_:1}),(0,a.bF)(b,{label:"快速开发",name:"quickDev"},{default:(0,a.k6)((()=>[(0,a.Lk)("div",h,[(0,a.bF)(I,{text:_.quickDev_md,onCopyCodeSuccess:g.handleCopyCodeSuccess},null,8,["text","onCopyCodeSuccess"])],512)])),_:1}),(0,a.bF)(b,{label:"国际化",name:"i18n"},{default:(0,a.k6)((()=>[(0,a.Lk)("div",p,[(0,a.bF)(I,{text:_.i18n_md,onCopyCodeSuccess:g.handleCopyCodeSuccess},null,8,["text","onCopyCodeSuccess"])],512)])),_:1}),(0,a.bF)(b,{label:"高级开发",name:"senior"},{default:(0,a.k6)((()=>[(0,a.Lk)("div",u,[(0,a.bF)(I,{text:_.senior_md,onCopyCodeSuccess:g.handleCopyCodeSuccess},null,8,["text","onCopyCodeSuccess"])],512)])),_:1})])),_:1})])),_:1},8,["modelValue","onTabClick"])])),_:1})])),_:1})])}var _='[[toc]]\n\n## 简介\n\nTHChatUI V3是一个专为**数据敏感型个人/组织/公司**设计的**开源大模型对话WebUI**，基于Vue和Element Plus开发，可简便快捷的接入本地大模型，保护信息安全。本项目基于Apache 2.0协议开源。\n\n前端采用Vue更适合中国宝宝体质~\n\n后端采用Python的Flask快速启动接口，项目提供了若干个调用示例(并不是必须的)。\n\n不需额外数据库，数据存浏览器**IndexedDB**中。\n\n## 功能介绍\n\n### 接口请求模式\n本项目支持**自定义模型接口**和**第三方HTTP请求**两种模式：\n1. （开发者友好）**自定义模型接口**：需要加载本地模型，并运行THChatUI提供的Python脚本。提供SSE、WS两种请求方式写法模板，支持HF平台所有对话大模型，可以完全保护隐私不被第三方获取。我们已经在`/thchat-server`目录下提供了若干个示例，可以参考。\n2. （使用者友好）**第三方HTTP请求**：仅需要去第三方申请KEY填入“设置”——“API KEY”中。本项目永久开放讯飞星火Spark Lite模型作为本仓库平台体验用。\n\n### 功能\n本项目支持的功能有：\n- 会话管理：支持会话创建、删除、编辑\n- 知识库管理：支持文件管理、文件上传、文件分片、文本召回、知识库问答(RAG)\n- 多轮对话：支持多轮对话、对话轮数配置\n- 联网搜索：支持使用LLM内置联网搜索、Tavily Search外挂联网搜索\n- 多平台集成，支持以下平台模型的调用：\n    - 阿里云百炼\n    - 百度千帆\n    - 轨基流动\n    - 月之暗面\n    - 讯飞星火\n    - 智谱AI\n    - OpenAI(包括类OpenAI式服务)\n    - Google AI(Gemini)\n    - Dify\n- 系统主题切换：支持浅色、深色、毛玻璃三种主题，支持自定义背景图片\n- 响应式设计：支持PC、移动端\n- 多模态：\n    - 支持普通对话、联网搜索对话、知识库对话\n    - 支持图片输入模型\n    - 支持图片绘制模型\n- 国际化：支持简中、英文\n- APIKEY管理：支持APIKEY的添加、删除、编辑\n- 模型管理：可手动添加各个平台的模型\n- 看板娘：支持看板娘，提供了200+模型\n\n### 设计特性\n本项目具有以下特性：\n- 专注于轻量化设计，纯前端项目，开箱即用，不需要繁琐的配置\n- 完全基于Vue和Element Plus开发\n- 不需要额外数据库，数据存浏览器IndexedDB中\n- 为开发者提供了丰富的接口示例，支持本地模型请求模式和第三方HTTP请求模式\n- 项目内部提供了丰富的配置项，持久化层采用面向对象设计，方便开发者进行二次开发，接入db存储接口\n\n## 界面展示\n\n\n| PC端 | 移动端 |\n|------|----------|\n| <img src="https://raw.githubusercontent.com/Unagi-cq/THChatUI/refs/heads/main/doc_img/four_website_shot.png" alt="THChatUI" align="middle" width="400" /> | <img src="https://raw.githubusercontent.com/Unagi-cq/THChatUI/refs/heads/main/doc_img/two_m_shot.png" alt="THChatUI" align="middle" width="300" /> |\n\n\n### 在线体验与代码仓库\n\n[THChatUI国内加速体验地址](http://47.98.255.222/#/)\n[THChatUI永久体验地址](https://unagi-cq.github.io/THChatUI/#/)\n> 【注】THChatUI在线体验版只提供了讯飞星火Lite模型调用，阿里云百炼、智谱AI平台、百度千帆、月之暗面、OpenAI的模型调用需要去对应平台申请Key并填入设置中，Key只会保存在本地浏览器缓存中，绝对安全。\n\n[THChatUI代码仓库](https://github.com/Unagi-cq/THChatUI)\n> 【注】代码仓提供了前端项目和后端接口示例。\n\n[THChatUI代码视频讲解教程](https://www.bilibili.com/video/BV1xTcVezEKP/)\n[个人博客](https://blog.csdn.net/qq_43592352?type=blog)',g='[[toc]]\n\n## API KEY说明\n如果你只想为你的API KEY提供一个友好对话的界面，那么仅仅需要去相应的平台申请KEY，然后在[THChatUI国内加速体验地址](http://localchatui.wuxitianyouqi.com/#/)的设置页面填写对应平台的API KEY即可快速使用。\n> 【注】目前大部分平台初次注册都会送百万至千万个token的免费额度，多换几个号可以薅很久羊毛。\n\n[申请阿里云平台API KEY](https://dashscope.console.aliyun.com/apiKey)\n[申请百度千帆平台API KEY](https://cloud.baidu.com/product/ai/wenxin)\n[申请月之暗面平台API KEY](https://platform.moonshot.cn/console/api-keys)\n[申请智谱平台API KEY](https://open.bigmodel.cn/usercenter/apikeys)\n[申请火山方舟平台API KEY](https://console.volcengine.com/ark/region:ark+cn-beijing/apiKey)\n[申请硅基流动平台API KEY](https://cloud.siliconflow.cn/account/ak)\n\n对于OpenAI式的API KEY，通常我们并不是仅仅指OpenAI这家公司的ChatGPT的API KEY，而是指提供了OpenAI接口规范的所有服务商的URL、KEY、Model这三个参数。\n\n几乎所有的厂商都支持OpenAI的API规范，因此你也可以去各大平台查看它们提供的参数，例如[Kimi](https://platform.moonshot.cn/docs/guide/migrating-from-openai-to-kimi#%E5%85%B3%E4%BA%8E-api-%E5%85%BC%E5%AE%B9%E6%80%A7)。\n\n> 【注】对于目前本项目没有集成的平台，你可以用OpenAI的API规范很容易的接入它们。\n\n## 使用说明\n\n如果你需要在本地部署THChatUI，请参考"快速开发"栏目。\n\n### 设置 - 模型\n\n这里可以设置你想要使用的模型，默认是科大讯飞的Spark lite模型。\n\n首先确保对应平台的API KEY已经填入，然后选择平台，再选择模型。\n\n模型名称后方带有`Web`的表示支持联网搜索。\n\n> 【注】如果模型名称后方带有`Web`，则表示支持联网搜索，但是需要你手动开启。免费模型虽然不要钱，但是需要先去申请API KEY才能使用。\n\n### 设置 - 通用\n\n历史对话轮数表示在聊天过程中你想要模型能够记住多少轮对话记录。轮数越多，模型能够记住的对话越多，但是也会消耗更多的token。\n\n### 设置 - API KEY\n\n在"设置"页面的"API KEY"栏目中，你可以为不同的平台分别填写对应的API KEY。每个平台的API KEY获取方式略有不同，具体可参考上文的申请链接。填写API KEY后，点击"设置"按钮即可保存。\n\n- 若你需要切换不同平台的模型，只需在此处填写或更换对应平台的API KEY，无需重复注册账号。\n- 支持多平台并行配置，填写多个API KEY后，可以在模型选择时自由切换。\n- 某些平台（如Azure等）可能还需要额外填写Endpoint、Region等参数，请根据界面提示补充完整。\n\n> 【提示】API KEY属于敏感信息，请妥善保管，避免泄露。建议不要在公共设备上保存API KEY。\n\n你可以随时在"API KEY"设置页面对已保存的KEY进行修改或删除，确保你的账户安全和使用灵活性。\n\n### 设置 - 知识库\n\n知识库的上传、拆分、召回、存储都是基于浏览器实现的，也就是消耗的是本机CPU资源。\n\n知识库目前支持PDF、TXT、DOCX、DOC格式文件的导入，上传文件后，会自动解析文件内容，然后按照chunk_size的值进行分割，分割后的内容会存储在浏览器数据库中。\n\n你可以设置chunk_size的值，表示一个分片的最长字符数。还可以设置召回的chunk数量，表示在聊天过程中模型能够从多少个chunk中召回信息。\n\n这同样也是有利有弊的，召回的chunk越多，模型能够记住的信息越多，但是也会消耗更多的token。\n\n> 【注】使用知识库时，需要在"设置"——"知识库"中开启"启用"，然后选择你需要挂载的知识库名称。\n\n#### 知识库 - 查看\n\n你可以点击"知识库"右上方的"查看"按钮，查看知识库内含有多少个chunk，以及每个chunk的详细内容。\n\n<img src="https://raw.githubusercontent.com/Unagi-cq/THChatUI/refs/heads/main/doc_img/kb_chunk.png" alt="chunk_example" align="middle" width="400" />\n\n### 设置 - 联网搜索\n\n在"设置"页面的"联网搜索"栏目中，你可以配置和启用第三方搜索服务（如TavilySearch），以便在对话过程中获取最新的互联网信息。具体操作如下：\n\n1. **启用联网搜索**  \n   首先，切换"启用"开关，激活联网搜索功能。只有启用后，相关模型才会在回答时调用互联网搜索结果。\n\n2. **填写API Key**  \n   目前支持Tavily等主流搜索API。你需要在"Tavily API Key"输入框中填写你在[Tavily官网](https://www.tavily.com/)申请到的API Key。填写后，系统会自动保存并在联网搜索时使用该Key。\n\n3. **使用说明**  \n   - 启用联网搜索后，支持Web的模型会在回答问题时自动检索互联网最新信息，提升答案的时效性和准确性。\n   - 你可以随时关闭联网搜索，模型将仅依赖本地知识和历史对话进行回答。\n   - Tavily等API通常有每月1000次免费额度，超出后需自行充值。\n\n4. **安全提示**  \n   API Key属于敏感信息，请勿泄露给他人。建议在个人设备上使用，并定期更换Key以保障安全。\n\n> 【注】不同模型对联网搜索的支持情况可能不同，具体以模型选择界面标注为准。\n\n### 设置 - 动漫人物\n\n在"设置"页面的"动漫人物"栏目中，你可以自行选择看板娘的模型。\n\n## 缓存与存储\n\n在"设置"——"清除缓存"中，你可以清除浏览器缓存，包括聊天记录、知识库、设置等。\n\n也可以在开发者模式的"应用"中，在`本地存储空间`和`IndexedDB`中查看存储的数据详情。',I='[[toc]]\n\nTHChatUI不仅提供了为开发者提供了前端项目，还提供了基于Python的Flask库启动的12个接口示例。\n\n这些接口提供了最简洁的实现方式（文件名含_simple_）与基于langchain的实现方式（文件名含_langchain_），并且分别提供了普通聊天、知识库检索、联网搜索、多模态输入和图片生成5种类型的接口示例。\n\n目前支持以下平台：<b>Web PC端、Web 移动端、Wins桌面端。</b>\n\n\n### 安装\n在安装项目前，请先移步[node中文官网](https://nodejs.cn/download/)安装node.js环境，理论上v14以上版本皆可，建议安装最新版，截至目前，node已经更新至v20.12.2。\n\n查看node是否安装成功：\n\n```bash\nnode -v\n```\n\n下载并运行：\n\n```bash\n# 下载到本地\ngit clone https://github.com/Unagi-cq/THChatUI\n# 进入web ui目录\ncd ./thchat-ui\n# 安装npm依赖\nnpm install\n# 本地运行\nnpm run serve\n```\n\n访问：\n\n```bash\nhttp://localhost:8080/\n```\n\n项目项目启动后，使用教程请参考“使用教程”栏目。\n\n对于开发人员，强烈建议使用本地接口调用的模式。参考仓库根目录下的**thchat-serve**文件夹：\n\n```bash\nthchat-serve\n├─igm\n│      5_zhipuai_ZHIPUAI_igm.py\n├─llm\n│  ├─chat\n│  │      1_simple_local_chat.py\n│  │      2_langchain_local_chat.py\n│  │      3_langchain_SparkLLM_chat.py\n│  │      4_langchain_TongyiQwen_chat.py\n│  │      5_langchain_ZHIPUAI_chat.py\n│  ├─rag\n│  │      1_simple_local_rag.py\n│  │      4_langchain_TongyiQwen_rag.py\n│  │      rag_example.pdf\n│  └─search\n│          1_simple_local_search.py\n│          3_langchain_SparkLLM_search.py\n│          5_langchain_ZHIPUAI_search.py\n└─vim\n        5_langchain_ZHIPUAI_vim.py\n```\n\n后端接口提供了三大类请求示例，分别是对话（llm）、多模态输入（igm）、图片生成（vim）。\n\n在对话（llm）中，提供了普通聊天（chat）、知识库检索（rag）、联网搜索（search）示例。\n\n每一种请求方式都提供了最简洁的实现方式（文件名含_simple_）和基于langchain的实现方式（文件名含_langchain_）。\n每一种请求方式都提供了加载本地模型的写法示例（安全、免费、要显卡）与用KEY请求第三方远程模型的写法示例（安全未知、收费、无须显卡资源）。\n\n后端文件的运行需要python3.10环境。先创建conda镜像，可以执行：\n\n```bash\n# 进入web serve目录\ncd ./thchat-serve\n# 创建conda镜像\nconda_env.sh\n# 激活conda镜像\nconda activate thchat\n```\n\n启动接口可以运行：\n```bash\n# 启动某个接口\npython ./llm/chat/1_simple_local_chat.py\n```\n\n> 【注】如果项目启动失败，请检查前端项目端口8080和后端服务端口5000是否被占用。\n\n### 打包部署\n前端项目打包：\n\n```bash\nnpm run bulid\n```\n\n打包成功会生成dist文件夹，把dist文件夹里面的内容上传到服务器即可。\n\n除此之外，阿里云平台的请求是需要配置代理的，还需要给站点的服务器添加如下nginx代理配置：\n\n```bash\nlocation ^~ /ali/remote/\n    {\n        proxy_pass https://dashscope.aliyuncs.com/;\n        proxy_ssl_server_name on; \n        proxy_set_header Host dashscope.aliyuncs.com;\n        proxy_set_header X-Real-IP $remote_addr;\n        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n        proxy_set_header REMOTE-HOST $remote_addr;\n        proxy_set_header Upgrade $http_upgrade;\n        proxy_http_version 1.1;\n        # proxy_hide_header Upgrade;\n    \n        add_header X-Cache $upstream_cache_status;\n        #Set Nginx Cache\n    \n        set $static_file8WLuNoD1 0;\n        if ( $uri ~* "\\.(gif|png|jpg|css|js|woff|woff2)$" )\n        {\n            set $static_file8WLuNoD1 1;\n            expires 1m;\n        }\n        if ( $static_file8WLuNoD1 = 0 )\n        {\n            add_header Cache-Control no-cache;\n        }\n    }\n```\n\n> 【注】 本地运行调试时不需要额外配置。`/ali/remote/` 是和前端项目的vue.config.js文件里的代理前缀对应的。\n\n后端接口部署就很简单了，配置好python3.10环境，安装好包，直接运行就行。\n\n### Electron桌面应用打包\n\n除了Web应用的支持，本项目还支持打包成各个平台（Windows、Linux、MacOS）的可执行文件。目前支持Wins桌面应用。\n\n桌面应用打包：\n\n```bash\nnpm run electron:dist\n```\n\n打包后，`thchat-ui`目录下会有`dist_electron`文件夹，可以双击其中的setup程序将THChatUI安装到电脑上。\n\n### 项目目录与代码实现\n请参考：[THChatUI V2 代码视频讲解教程](https://www.bilibili.com/video/BV1xTcVezEKP/)',b="[[toc]]\n\n## 简介\n默认采用简体中文作为语言，如果需要使用其他语言，可以参考下面的方案。\n\n> 在 2.0.3 版本之后，考虑到代码的可读性，我移除了多语言设置，但是你仍然可以在仓库的2.0.3分支找到多语言代码，建议配上这篇文档食用。\n\n## 方案\n\n### 添加本地化语言文件\n参考`src/plugins/locales/`下的`zh-CN.js`与`en-US.js`文件，添加你自己的本地化语言文件。假设是繁体中文，则添加`zh-HK.js`文件。\n\n### 修改`src/plugins/i18n.js`\n在`src/plugins/i18n.js`中，添加本地化语言文件的导入。\n\n```javascript\n...\nimport zhHK from './locales/zh-HK.js'\n\nconst i18n = createI18n({\n  ...\n  messages: {\n    ...\n    'zh-HK': zhHK\n  }\n})\n```\n\n### 修改`src/views/setting/index.vue`\n在`src/views/setting/index.vue`中，添加本地化语言的可选项。\n\n```html\n<el-select v-model=\"locale\" @change=\"changeLocale\">\n  ...\n  <el-option value=\"zh-HK\">繁体中文</el-option>\n</el-select>\n```\n\n到这里就可以了。\n\n### 修改默认语言\n\n如果你还想修改默认语言，可以修改`src/plugins/i18n.js`中的`locale`属性。假设默认语言为繁体中文，则修改为`zh-HK`。\n\n```javascript\nconst i18n = createI18n({\n  ...\n  locale: localStorage.getItem('locale') || 'zh-HK',\n  fallbackLocale: 'zh-HK',\n  ...\n})\n```\n\n",y='[[toc]]\n\n## 二次开发\n\n请参考：[THChatUI V2 代码视频讲解教程](https://www.bilibili.com/video/BV1xTcVezEKP/)\n\n## 看板娘\n\n请参考：[https://npm.io/package/live2d-helper](https://npm.io/package/live2d-helper)\n\n封装的live2d-helper，可以方便的调用看板娘，并且支持自定义模型。但是功能有限，且用且珍惜。\n\n## 数据schema\n\nTHChatUI运行时，数据存储在两个地方：\n1. 浏览器缓存`LocalStorage`\n2. 浏览器数据库`IndexedDB`\n\n数据拆分成两个地方存储，`LocalStorage`存储的是用户设置，是可以被清空的，`IndexedDB`存储的是用户对话数据，一般来说是需要持久化存储的。因此，将需要存储的数据存在了`IndexedDB`中。并且还做了面向对象的封装，方便大家接入自己的数据库，详见`thchat-ui/src/schema/`。\n\n### 浏览器缓存\n以下是THChatUI运行时存储在浏览器缓存`LocalStorage`的数据结构示例：\n```json\n{\n    "settingStorage": {\n        /******************************** 系统设置弹窗对应的参数 ********************************/\n        // 系统主题\n        theme: \'light\',\n        // 背景图片\n        bg: bg,\n        // 是否显示回答统计\n        chat_detail: true,\n        // 模型列表\n        model_list: model_list,\n        // 平台\n        platform: \'Xunfei_Spark\',\n        // 是否多轮对话\n        memory: true,\n        // 历史对话轮数限制\n        memory_limit: 3,\n        // 模型配置\n        model_config: {\n            // 模型类型\n            type: "llm",\n            // 模型系列\n            series: "xunfei",\n            // 模型版本\n            version: "spark lite"\n        },\n        /******************************** 系统默认参数 ********************************/\n        // 输入框单次上传的文件数量\n        upload_limit: 1,\n        // 输入框可上传的文件类型 暂未接入其他多模态模型 所以只填图片\n        upload_type: "image/",\n        // 输入框限制文件大小 2MB\n        upload_size: 2,\n        /******************************** 知识库参数 ********************************/\n        // 一个chunk的最长字符数\n        chunk_size: 500,\n        // 限制文件大小 5MB\n        kb_file_size: 5,\n        // 召回数量\n        recall_count: 3,\n        // 选中的知识库\n        selected_repoId: \'\',\n        // 知识库启用状态\n        kb_enabled: false,\n        /******************************** 联网搜索参数 ********************************/\n        // 是否启用联网搜索\n        web_search_enabled: false,\n        // 是否使用TavilySearch\n        is_tavily_search: false,\n        // TavilySearch key\n        tavily_search_key: "",\n        /******************************** 看板娘设置 ********************************/\n        // 是否启用看板娘\n        live2d_enabled: false,\n        // 看板娘模型索引\n        live2d_model_index: 0,\n        // 看板娘模型\n        live2d_model: "https://raw.githubusercontent.com/zenghongtu/live2d-model-assets/master/assets/moc/22.xmas.1/22.2017.newyear.model.json"\n    }\n}\n```\n\n### 浏览器数据库 - 激活状态\n```\n# 表 active\n# 值 \n1715599712260\n```\n\n### 浏览器数据库 - 对话数据\n```\n# 表 chatStorage\n# 值\n{\n    "list": [\n        {\n            "sessionId": 1736680973076,\n            "data": [\n                {\n                    "qaId": 1736680973076,\n                    "query": "你好",\n                    "answer": "你好！很高兴为你提供帮助。",\n                    "files": [],\n                    "responseTime": 1736680973594,\n                    "finishTime": 1736680973694,\n                    "series": "qwen",\n                    "modelName": "qwen-turbo",\n                    "modelType": "llm"\n                }\n            ]\n        }\n    ]\n}\n```\n\n### 浏览器数据库 - 知识库数据\n```\n# 表 kbStorage\n# 值\n{\n    "statistics": {\n        "totalRepositories": 1,\n        "totalFiles": 1,\n        "totalChunks": 1\n    },\n    "list": [\n        {\n            "repoId": 1736657169289,\n            "name": "论文笔记",\n            "createTime": "2025/1/12 12:46:09",\n            "description": "啦啦啦",\n            "list": [\n                {\n                    "fileId": 1736668174700,\n                    "name": "孔乙己 .pdf",\n                    "createTime": "2025/1/12 15:49:34",\n                    "fileType": "pdf",\n                    "url": "",\n                    "size": 206752,\n                    "showChunks": false,\n                    "list": [\n                        {\n                            "chunkId": 1736668174700,\n                            "content": "鲁迅   孔乙己   原文   鲁镇的酒店的...",\n                            "contentLength": 490,\n                            "words": [\n                                "鲁迅",\n                                "孔乙",\n                                "己",\n                                "原文",\n                                "鲁镇",\n                                "的",\n                                "酒店",\n                                "的",\n                                ...\n                            ]\n                        }\n                    ]\n                }\n            ]\n        }\n    ]\n}\n```\n\n### 浏览器数据库 - 会话标题数据\n```\n# 表 tabStorage\n# 值\n{\n    "list": [\n        {\n            "title": "你好",\n            "uuid": 1736680973076\n        }\n    ]\n}\n```\n',C=t(57477),v={name:"Docs",components:{ArrowUp:C.ArrowUp},data(){return{intro_md:_,tutorial_md:g,quickDev_md:I,i18n_md:b,senior_md:y,activeTabName:"intro",showBackToTop:!1}},computed:{activeTab(){const n={intro:"介绍",tutorial:"使用教程",quickDev:"快速开发",i18n:"国际化",senior:"高级开发"};return n[this.activeTabName]}},mounted(){window.addEventListener("scroll",this.handleScroll)},beforeUnmount(){window.removeEventListener("scroll",this.handleScroll)},methods:{handleCopyCodeSuccess(){this.$notify({title:"代码复制成功！",type:"success"})},handleTabClick(){},handleScroll(){this.showBackToTop=window.scrollY>300},scrollToTop(){window.scrollTo({top:0,behavior:"smooth"})}}},k=t(71241);const T=(0,k.A)(v,[["render",m],["__scopeId","data-v-15189e0e"]]);var f=T}}]);
//# sourceMappingURL=366.2217ada4.js.map