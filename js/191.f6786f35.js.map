{"version":3,"file":"js/191.f6786f35.js","mappings":"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","sources":["webpack://THChatUI/./src/util/config.js","webpack://THChatUI/./src/api/OpenAI/index.js"],"sourcesContent":["/**\n * @fileoverview 聊天应用的配置文件\n * 包含模型配置、消息预处理和后处理的相关功能\n * 支持多个AI平台的接入，包括阿里云、百度、讯飞、智谱AI等\n */\n\n/**\n * 前处理(入参)规则处理\n * @param {string} model_version - 模型版本标识\n * @param {string} prompt - 用户当前的输入内容\n * @param {Array} history - 历史对话记录数组\n * @param {string} pre_method - 预处理方法标识\n * @param {Array} files - 上传的文件数组，主要用于图像处理\n * @param {boolean} is_search - 是否启用网络搜索功能\n */\nfunction preProcess(model_version, prompt, history, pre_method, files, is_search) {\n    let body = {};\n    console.log(is_search);\n    switch (pre_method) {\n        // 阿里平台的文本输入格式\n        case \"text_ali\":\n            body = {\n                model: model_version,\n                input: {\n                    messages: buildLlmMessage(prompt, history)\n                },\n                parameters: {\n                    result_format: \"message\",\n                    incremental_output: true\n                }\n            }\n            if (is_search) {\n                body.parameters.enable_search = true;\n            }\n            break;\n        // 百度平台的文本输入格式\n        case \"text_baidu\":\n            body = {\n                model: model_version,\n                messages: buildLlmMessage(prompt, history),\n                stream: true\n            }\n            if (is_search) {\n                body.web_search = {\n                    enable: true\n                };\n            }\n            break;\n        // 讯飞平台的文本输入格式\n        case \"text_xunfei\":\n            body = {\n                parameter: {\n                    chat: {\n                        domain: \"general\",\n                        temperature: 0.5,\n                        max_tokens: 1024,\n                    },\n                },\n                payload: {\n                    message: {\n                        text: buildLlmMessage(prompt, history)\n                    },\n                },\n            }\n            break;\n        // 智谱AI和月之暗面的文本输入格式\n        case \"text_moonshot_zhipu\":\n            body = {\n                model: model_version,\n                messages: buildLlmMessage(prompt, history),\n                stream: true\n            }\n            break;\n        // 本地接口 文本输入格式\n        case \"local\": \n            body = {\n                input: {\n                    prompt: prompt,\n                    history: getLocalHistory(history),\n                    files: files\n                }\n            };\n            break;\n        // 阿里平台的图片输入格式\n        case \"img_ali\":\n            body = {\n                model: model_version,\n                input: {\n                    messages: buildAliVLMessage(prompt, history, files)\n                },\n                parameters: {\n                    result_format: \"message\",\n                    incremental_output: true\n                }\n            }\n            break;\n        // 智谱AI平台的图片输入格式\n        case \"img_zhipu\":\n            body = {\n                model: model_version,\n                messages: buildZhipuVLMessage(prompt, history, files),\n                stream: true\n            }\n            break;\n        // 智谱AI平台的图片生成模型输入格式\n        case \"igm_zhipu\":\n            body = {\n                model: model_version,\n                prompt: prompt\n            }\n            break;\n    }\n    return body;\n}\n\n/**\n * 构建LLM文本对话消息\n * @param {string} prompt - 用户当前的输入内容\n * @param {Array} history - 历史对话记录数组\n */\nfunction buildLlmMessage(prompt, history) {\n    function getHistory(history) {\n        const array = [];\n        // 排除最后一条 history，因为是本次刚发的消息\n        for (let i = 0; i < history.length - 1; i++) {\n            const chat = history[i];\n            array.push({\n                \"role\": \"user\",\n                \"content\": chat.query\n            });\n            array.push({\n                \"role\": \"assistant\",\n                \"content\": chat.answer\n            });\n        }\n        return array;\n    }\n    let arr = getHistory(history)\n    arr.push({\n        \"role\": \"user\",\n        \"content\": prompt\n    })\n    return arr;\n}\n\n/**\n * 构建智谱AI平台的多模态消息\n * @param {string} prompt - 用户当前的输入内容\n * @param {Array} history - 历史对话记录数组\n * @param {Array} files - 上传的文件数组，主要包含图片的base64数据\n */\nfunction buildZhipuVLMessage(prompt, history, files) {\n    function getHistory(history) {\n        const array = [];\n        // 排除最后一条 history，因为是本次刚发的消息\n        for (let i = 0; i < history.length - 1; i++) {\n            const chat = history[i];\n            array.push({\n                \"role\": \"user\",\n                \"content\": [{ \"type\": \"text\", \"text\": chat.query }]\n            });\n            array.push({\n                \"role\": \"assistant\",\n                \"content\": [{ \"type\": \"text\", \"text\": chat.answer }]\n            });\n        }\n        return array;\n    }\n    let arr = getHistory(history);\n    let content = [];\n\n    if (files && files.length > 0 && files[0].base64) {\n        content.push({\n            \"type\": \"image_url\",\n            \"image_url\": {\n                \"url\": files[0].base64\n            }\n        });\n    }\n\n    content.push({\n        \"type\": \"text\",\n        \"text\": prompt\n    });\n\n    arr.push({\n        \"role\": \"user\",\n        \"content\": content\n    });\n\n    return arr;\n}\n\n/**\n * 构建阿里云平台的多模态消息\n * @param {string} prompt - 用户当前的输入内容\n * @param {Array} history - 历史对话记录数组\n * @param {Array} files - 上传的文件数组，主要包含图片的base64数据\n */\nfunction buildAliVLMessage(prompt, history, files) {\n    function getHistory(history) {\n        const array = [];\n        // 排除最后一条 history，因为是本次刚发的消息\n        for (let i = 0; i < history.length - 1; i++) {\n            const chat = history[i];\n            array.push({\n                \"role\": \"user\",\n                \"content\": [{ \"text\": chat.query }]\n            });\n            array.push({\n                \"role\": \"assistant\",\n                \"content\": [{ \"text\": chat.answer }]\n            });\n        }\n        return array;\n    }\n    let arr = getHistory(history);\n    let content = [];\n\n    if (files && files.length > 0 && files[0].base64) {\n        content.push({\n            \"image\": files[0].base64\n        });\n    }\n\n    content.push({\n        \"text\": prompt\n    });\n\n    arr.push({\n        \"role\": \"user\",\n        \"content\": content\n    });\n\n    return arr;\n}\n\n/**\n * 本地接口 拼接历史对话\n * @param history\n * @returns {*[]}\n */\nfunction getLocalHistory(history) {\n    const array = [];\n    for (let i = 0; i < history.length; i++) {\n        const chat = history[i];\n        array.push({\n            user: chat.query,\n            assistant: chat.answer,\n        });\n    }\n\n    return array;\n}\n\n/**\n * 后处理(出参)规则处理\n * @param {Object} e - API返回的原始数据\n * @param {string} post_method - 后处理方法标识\n */\nfunction postProcess(e, post_method) {\n    switch (post_method) {\n        case \"base\":\n            return {content:JSON.parse(e.data).output.choices[0].message.content};\n        case \"text\":\n            const content = JSON.parse(e.data).output.choices[0].message.content;\n            return { content: content && content.length > 0 ? content[0].text : '' };\n        case \"add\":\n            return {content:e};\n        case \"delta\":\n            return {content:JSON.parse(e.data).choices[0].delta.content};\n        case \"delta_reasoning\":\n            if (JSON.parse(e.data).choices[0].delta.reasoning_content) {\n                return {reasoning_content:JSON.parse(e.data).choices[0].delta.reasoning_content};\n            } else {\n                return {content:JSON.parse(e.data).choices[0].delta.content};\n            }\n        case \"baidu\":\n            return {content:JSON.parse(e.data).result};\n        case \"llm_local\":\n            if (e.event !== 'data') return '';\n            // 解析chunk里面的data参数\n            const data = JSON.parse(e.data);\n            try {\n                return {content:data.data.content};\n            } catch (e) {\n                console.error(e)\n            }\n        case \"igm_zhipu\":\n            return {content:e.data[0].url};\n        default:\n            console.warn(`未知的后处理方法: ${post_method}`);\n            return e;\n    }\n}\n\nmodule.exports = {\n    /**\n     * 模型列表\n     */\n    model_list: {\n        \"Ali_DashScope\": {\n            platform_name: \"阿里云百炼\",\n            list: [\n                { type: \"llm\", name: \"qwen-turbo\", series: \"qwen\", version: \"qwen-turbo-latest\", pre_method: \"text_ali\", post_method: \"base\", can_web_search: true },\n                { type: \"llm\", name: \"qwen-plus\", series: \"qwen\", version: \"qwen-plus-latest\", pre_method: \"text_ali\", post_method: \"base\", can_web_search: true },\n                { type: \"llm\", name: \"qwen-max\", series: \"qwen\", version: \"qwen-max-latest\", pre_method: \"text_ali\", post_method: \"base\", can_web_search: true },\n                { type: \"llm\", name: \"qwen-math-turbo\", series: \"qwen\", version: \"qwen-math-turbo-latest\", pre_method: \"text_ali\", post_method: \"base\" },\n                { type: \"llm\", name: \"qwen-coder-plus\", series: \"qwen\", version: \"qwen-coder-plus-latest\", pre_method: \"text_ali\", post_method: \"base\" },\n                { type: \"vim\", name: \"qwen-vl-max\", series: \"qwen\", version: \"qwen-vl-max-latest\", pre_method: \"img_ali\", post_method: \"text\" },\n                { type: \"vim\", name: \"qwen-vl-plus\", series: \"qwen\", version: \"qwen-vl-plus-latest\", pre_method: \"img_ali\", post_method: \"text\" },\n                { type: \"vim\", name: \"qwen-vl-ocr\", series: \"qwen\", version: \"qwen-vl-ocr-latest\", pre_method: \"img_ali\", post_method: \"text\" },\n            ]\n        },\n        \"Baidu_QianFan\":\n        {\n            platform_name: \"百度千帆\",\n            list: [\n                { type: \"llm\", name: \"ernie-4.0-8k\", series: \"wenxin\", version: \"ernie-4.0-8k-latest\", pre_method: \"text_baidu\", post_method: \"baidu\", can_web_search: true },\n                { type: \"llm\", name: \"ernie-speed-128k\", series: \"wenxin\", version: \"ernie-speed-128k\", pre_method: \"text_baidu\", post_method: \"baidu\" },\n                { type: \"llm\", name: \"ernie-tiny-8k\", series: \"wenxin\", version: \"ernie-tiny-8k\", pre_method: \"text_baidu\", post_method: \"baidu\" },\n                { type: \"llm\", name: \"ernie-lite-8k\", series: \"wenxin\", version: \"ernie-lite-8k\", pre_method: \"text_baidu\", post_method: \"baidu\" },\n                { type: \"llm\", name: \"Yi-34B-Chat\", series: \"yi\", version: \"yi_34b_chat\", pre_method: \"text_baidu\", post_method: \"baidu\" }\n            ]\n        },\n        \"Moonshot_AI\":\n        {\n            platform_name: \"月之暗面\",\n            list: [\n                { type: \"llm\", name: \"moonshot-v1-8k\", series: \"moonshot\", version: \"moonshot-v1-8k\", pre_method: \"text_moonshot_zhipu\", post_method: \"delta\" },\n                { type: \"llm\", name: \"moonshot-v1-32k\", series: \"moonshot\", version: \"moonshot-v1-32k\", pre_method: \"text_moonshot_zhipu\", post_method: \"delta\" },\n                { type: \"llm\", name: \"moonshot-v1-128k\", series: \"moonshot\", version: \"moonshot-v1-128k\", pre_method: \"text_moonshot_zhipu\", post_method: \"delta\" }\n            ]\n        },\n        \"Xunfei_Spark\":\n        {\n            platform_name: \"讯飞星火\",\n            list: [\n                { type: \"llm\", name: \"Spark Lite 🆓\", series: \"xunfei\", version: \"spark lite\", pre_method: \"text_xunfei\", post_method: \"add\" }\n            ]\n        },\n        \"Zhipu_BigModel\":\n        {\n            platform_name: \"智谱AI\",\n            list: [\n                { type: \"llm\", name: \"glm-4-flash 🆓\", series: \"zhipu\", version: \"glm-4-flash\", pre_method: \"text_moonshot_zhipu\", post_method: \"delta\" },\n                { type: \"llm\", name: \"glm-4-0520\", series: \"zhipu\", version: \"glm-4-0520\", pre_method: \"text_moonshot_zhipu\", post_method: \"delta\" },\n                { type: \"llm\", name: \"glm-4-air\", series: \"zhipu\", version: \"glm-4-air\", pre_method: \"text_moonshot_zhipu\", post_method: \"delta\" },\n                { type: \"llm\", name: \"glm-4-plus\", series: \"zhipu\", version: \"glm-4-plus\", pre_method: \"text_moonshot_zhipu\", post_method: \"delta\" },\n                { type: \"llm\", name: \"glm-4-long\", series: \"zhipu\", version: \"glm-4-long\", pre_method: \"text_moonshot_zhipu\", post_method: \"delta\" },\n                { type: \"llm\", name: \"glm-4-flashx\", series: \"zhipu\", version: \"glm-4-flashx\", pre_method: \"text_moonshot_zhipu\", post_method: \"delta\" },\n                { type: \"llm\", name: \"glm-4-airx\", series: \"zhipu\", version: \"glm-4-airx\", pre_method: \"text_moonshot_zhipu\", post_method: \"delta\" },\n                { type: \"llm\", name: \"glm-4\", series: \"zhipu\", version: \"glm-4\", pre_method: \"text_moonshot_zhipu\", post_method: \"delta\" },\n                { type: \"vim\", name: \"glm-4v\", series: \"zhipu\", version: \"glm-4v\", pre_method: \"img_zhipu\", post_method: \"delta\" },\n                { type: \"igm\", name: \"cogview-3-flash 🆓\", series: \"zhipu\", version: \"cogview-3-flash\", pre_method: \"igm_zhipu\", post_method: \"igm_zhipu\" },\n                { type: \"igm\", name: \"cogview-3\", series: \"zhipu\", version: \"cogview-3\", pre_method: \"igm_zhipu\", post_method: \"igm_zhipu\" },\n                { type: \"igm\", name: \"cogview-3-plus\", series: \"zhipu\", version: \"cogview-3-plus\", pre_method: \"igm_zhipu\", post_method: \"igm_zhipu\" },\n            ]\n        },\n        \"TT_Volcengine\":\n        {\n            platform_name: \"火山方舟\",\n            list: [\n                { type: \"llm\", name: \"deepseek-r1\", series: \"volcengine\", version: \"\", pre_method: \"text_moonshot_zhipu\", post_method: \"delta_reasoning\" }\n            ]\n        },\n        \"Yidong_CMECloud\":\n        {\n            platform_name: \"移动云\",\n            list: [\n                { type: \"llm\", name: \"default\", series: \"default\", version: \"default\", pre_method: \"text_moonshot_zhipu\", post_method: \"delta\" }\n            ]\n        },\n        \"OpenAI\":\n        {\n            platform_name: \"OpenAI\",\n            list: [\n                { type: \"llm\", name: \"llm\", series: \"default\", version: \"llm_default\", pre_method: \"text_moonshot_zhipu\", post_method: \"add\" }\n            ]\n        },\n        \"Local\":\n        {\n            platform_name: \"本地调用\",\n            list: [\n                { type: \"llm\", name: \"对话模型\", series: \"local\", version: \"llm_local\", pre_method: \"local\", post_method: \"llm_local\", can_web_search: true },\n                { type: \"vim\", name: \"图片理解模型\", series: \"local\", version: \"vim_local\", pre_method: \"local\", post_method: \"llm_local\" },\n                { type: \"igm\", name: \"图片生成模型\", series: \"local\", version: \"igm_local\", pre_method: \"local\", post_method: \"igm_zhipu\" },\n            ]\n        }\n    },\n    /**\n     * 前处理(入参)规则处理\n     */\n    preProcess: preProcess,\n    /**\n     * 后处理(出参)规则处理\n     */\n    postProcess: postProcess\n}","/**\n * @fileoverview OpenAI平台的HTTP调用。\n * 接口采用SSE请求方式，不需要跨域配置\n */\nconst OpenAI = require('openai')\nimport {preProcess} from \"@/util/config\"\nimport store from '../../store';\n\n/**\n * 调用OpenAI平台的接口\n * @param {string} prompt - 用户输入的问题\n * @param {Array} history - 历史对话消息\n * @param {Array} files - 文件列表\n * @param {AbortController} controller - 控制请求的取消\n * @param {Function} onopen - 连接成功回调\n * @param {Function} onmessage - 接收消息回调\n * @param {Function} onclose - 连接关闭回调\n * @param {Function} onerror - 错误处理回调\n */\nexport async function fetchAPI({\n    prompt,\n    history,\n    files,\n    controller,\n    onopen,\n    onmessage,\n    onclose,\n    onerror\n}) {\n    const { setting } = store.state;\n    const { model_config } = setting;\n    const { pre_method } = model_config;\n    const { endpoint, api_key, model_name } = setting.api_key_map['OpenAI'];\n\n    const openai = new OpenAI({\n        apiKey: api_key,\n        baseURL: endpoint,\n        temperature: 0,\n        dangerouslyAllowBrowser: true\n    });\n\n    try {\n        const stream = await openai.chat.completions.create({\n            ...preProcess(model_name, prompt, history, pre_method, files, false),\n            stream: true,\n        });\n\n        onopen?.();\n\n        for await (const chunk of stream) {\n            const content = chunk.choices[0]?.delta?.content || '';\n            onmessage?.(content);\n        }\n\n        onclose?.();\n    } catch (error) {\n        onerror?.(error);\n        throw error;\n    }\n}\n"],"names":["preProcess","model_version","prompt","history","pre_method","files","is_search","body","console","log","model","input","messages","buildLlmMessage","parameters","result_format","incremental_output","enable_search","stream","web_search","enable","parameter","chat","domain","temperature","max_tokens","payload","message","text","getLocalHistory","buildAliVLMessage","buildZhipuVLMessage","getHistory","array","i","length","push","query","answer","arr","content","base64","user","assistant","postProcess","e","post_method","JSON","parse","data","output","choices","delta","reasoning_content","result","event","error","url","warn","module","exports","model_list","platform_name","list","type","name","series","version","can_web_search","OpenAI","require","async","fetchAPI","controller","onopen","onmessage","onclose","onerror","setting","store","state","model_config","endpoint","api_key","model_name","api_key_map","openai","apiKey","baseURL","dangerouslyAllowBrowser","completions","create","chunk"],"sourceRoot":""}